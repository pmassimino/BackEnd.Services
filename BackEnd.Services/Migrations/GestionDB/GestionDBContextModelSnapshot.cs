// <auto-generated />
using System;
using BackEnd.Services.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Services.Migrations.GestionDB
{
    [DbContext(typeof(GestionDBContext))]
    partial class GestionDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("BackEnd.Services.Models.Afip.AfipWs", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreServicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AfipWs");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Afip.CertificadoDigital", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CertificadoDigital");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Almacen.Articulo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AlicuotaIva")
                        .HasColumnType("TEXT");

                    b.Property<string>("CondIva")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostoVenta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdFamilia")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUnidad")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ImpuestoVenta")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MargenVenta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioVentaFinal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockActual")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockMaximo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockMinimo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockReposicion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdFamilia");

                    b.ToTable("Articulo");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Almacen.Familia", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaEgresoDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaIngresoDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdFamilia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Familia");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = "001",
                            Nombre = "GENERAL"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Contacto", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("IdSujeto")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("Cargo")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Movil1")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Movil2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Movil3")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono1")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono3")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("email1")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("email2")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("email3")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "IdSujeto");

                    b.HasIndex("IdSujeto");

                    b.ToTable("Contacto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Domicilio", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("IdSujeto")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal?>("Altura")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CodigoPlanta")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("idLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "IdSujeto");

                    b.HasIndex("IdSujeto");

                    b.ToTable("Domicilio");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.NumeradorDocumento", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdComprobante")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PuntoEmision")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NumeradorDocumento");

                    b.HasData(
                        new
                        {
                            Id = "00001",
                            IdComprobante = 0,
                            Nombre = "FACTURA A",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00002",
                            IdComprobante = 0,
                            Nombre = "NOTA CREDITO A",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00003",
                            IdComprobante = 0,
                            Nombre = "NOTA DEBITO A",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00004",
                            IdComprobante = 0,
                            Nombre = "FACTURA B",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00005",
                            IdComprobante = 0,
                            Nombre = "NOTA CREDITO B",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00006",
                            IdComprobante = 0,
                            Nombre = "NOTA DEBITO B",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00007",
                            IdComprobante = 0,
                            Nombre = "FACTURA C",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00008",
                            IdComprobante = 0,
                            Nombre = "NOTA CREDITO C",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00009",
                            IdComprobante = 0,
                            Nombre = "NOTA DEBITO C",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00010",
                            IdComprobante = 0,
                            Nombre = "FACTURA M",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00011",
                            IdComprobante = 0,
                            Nombre = "NOTA CREDITO M",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00012",
                            IdComprobante = 0,
                            Nombre = "NOTA DEBITO M",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00013",
                            IdComprobante = 0,
                            Nombre = "FACTURA E",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00014",
                            IdComprobante = 0,
                            Nombre = "NOTA CREDITO E",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00015",
                            IdComprobante = 0,
                            Nombre = "NOTA DEBITO E",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00016",
                            IdComprobante = 0,
                            Nombre = "REMITO",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00017",
                            IdComprobante = 0,
                            Nombre = "PRESUPUESTO",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00018",
                            IdComprobante = 0,
                            Nombre = "PEDIDO",
                            Numero = 0,
                            PuntoEmision = 1
                        },
                        new
                        {
                            Id = "00019",
                            IdComprobante = 0,
                            Nombre = "RECIBO",
                            Numero = 0,
                            PuntoEmision = 1
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Seccion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Seccion");

                    b.HasData(
                        new
                        {
                            Id = "001",
                            Nombre = "GENERAL"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Sujeto", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Altura")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CondIvaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax1")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax3")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCondicionGanancia")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCondicionIB")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCondicionIva")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCondicionProductor")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProvincia")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipoDoc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalidadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Movil1")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Movil2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Movil3")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreComercial")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NumeroIB")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Oficina")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Piso")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono1")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono3")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("email1")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("email2")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("email3")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CondIvaId");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.TipoRol", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoRol");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nombre = "CLIENTE"
                        },
                        new
                        {
                            Id = "2",
                            Nombre = "PROVEEDOR"
                        },
                        new
                        {
                            Id = "3",
                            Nombre = "PRODUCTOR"
                        },
                        new
                        {
                            Id = "4",
                            Nombre = "TRANSPORTISTA"
                        },
                        new
                        {
                            Id = "5",
                            Nombre = "DESTINATARIO"
                        },
                        new
                        {
                            Id = "6",
                            Nombre = "REPRESENTANTE"
                        },
                        new
                        {
                            Id = "7",
                            Nombre = "CORREDOR"
                        },
                        new
                        {
                            Id = "8",
                            Nombre = "ENTREGADOR"
                        },
                        new
                        {
                            Id = "9",
                            Nombre = "INTERMEDIARIO"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.TipoRolSujeto", b =>
                {
                    b.Property<string>("IdTipoRol")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("IdSujeto")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("DateAdd")
                        .HasColumnType("TEXT");

                    b.HasKey("IdTipoRol", "IdSujeto");

                    b.HasIndex("IdSujeto");

                    b.ToTable("TipoRolSujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Transaccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transaccion");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Vehiculo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("IdSujeto")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreChofer")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NumeroDocumento")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatenteAcoplado")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatenteChasis")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "IdSujeto");

                    b.HasIndex("IdSujeto");

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.ComprobanteMayor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdComprobante")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ComprobanteMayor");

                    b.HasData(
                        new
                        {
                            Id = "00001",
                            Nombre = "General"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.CuentaMayor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSuperior")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUso")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdTipo");

                    b.HasIndex("IdUso");

                    b.ToTable("CuentaMayor");

                    b.HasData(
                        new
                        {
                            Id = "1000",
                            IdTipo = "1",
                            IdUso = "1",
                            Nombre = "ACTIVO"
                        },
                        new
                        {
                            Id = "1100",
                            IdSuperior = "1000",
                            IdTipo = "1",
                            IdUso = "1",
                            Nombre = "DISPONIBILIDADES"
                        },
                        new
                        {
                            Id = "1111",
                            IdSuperior = "1100",
                            IdTipo = "1",
                            IdUso = "4",
                            Nombre = "CAJA"
                        },
                        new
                        {
                            Id = "1112",
                            IdSuperior = "1100",
                            IdTipo = "1",
                            IdUso = "2",
                            Nombre = "MONEDA EXTRANJERA"
                        },
                        new
                        {
                            Id = "1113",
                            IdSuperior = "1100",
                            IdTipo = "1",
                            IdUso = "5",
                            Nombre = "BANCO"
                        },
                        new
                        {
                            Id = "1114",
                            IdSuperior = "1100",
                            IdTipo = "1",
                            IdUso = "6",
                            Nombre = "VALORES A DEPOSITAR"
                        },
                        new
                        {
                            Id = "1120",
                            IdSuperior = "1000",
                            IdTipo = "1",
                            IdUso = "1",
                            Nombre = "CUENTAS POR COBRAR"
                        },
                        new
                        {
                            Id = "1121",
                            IdSuperior = "1120",
                            IdTipo = "1",
                            IdUso = "3",
                            Nombre = "CUENTAS CORRIENTES"
                        },
                        new
                        {
                            Id = "1122",
                            IdSuperior = "1120",
                            IdTipo = "2",
                            IdUso = "4",
                            Nombre = "TARJETA DE CREDITO"
                        },
                        new
                        {
                            Id = "1123",
                            IdSuperior = "1120",
                            IdTipo = "1",
                            IdUso = "4",
                            Nombre = "TARJETA DE DEBITO"
                        },
                        new
                        {
                            Id = "1140",
                            IdSuperior = "1000",
                            IdTipo = "1",
                            IdUso = "1",
                            Nombre = "IVA"
                        },
                        new
                        {
                            Id = "1141",
                            IdSuperior = "1140",
                            IdTipo = "1",
                            IdUso = "7",
                            Nombre = "IVA CREDITO FISCAL 21%"
                        },
                        new
                        {
                            Id = "1142",
                            IdSuperior = "1140",
                            IdTipo = "1",
                            IdUso = "7",
                            Nombre = "IVA CREDITO FISCAL 10.5%"
                        },
                        new
                        {
                            Id = "1143",
                            IdSuperior = "1140",
                            IdTipo = "1",
                            IdUso = "7",
                            Nombre = "IVA CREDITO FISCAL 27%"
                        },
                        new
                        {
                            Id = "1144",
                            IdSuperior = "1140",
                            IdTipo = "1",
                            IdUso = "2",
                            Nombre = "IVA RETENCIÓN"
                        },
                        new
                        {
                            Id = "1145",
                            IdSuperior = "1140",
                            IdTipo = "1",
                            IdUso = "2",
                            Nombre = "IVA PERCEPCIÓN"
                        },
                        new
                        {
                            Id = "2000",
                            IdTipo = "2",
                            IdUso = "1",
                            Nombre = "PASIVO"
                        },
                        new
                        {
                            Id = "2110",
                            IdSuperior = "2000",
                            IdTipo = "2",
                            IdUso = "1",
                            Nombre = "DEUDAS COMERCIALES"
                        },
                        new
                        {
                            Id = "2111",
                            IdSuperior = "2110",
                            IdTipo = "2",
                            IdUso = "3",
                            Nombre = "PROVEEDORES"
                        },
                        new
                        {
                            Id = "2130",
                            IdSuperior = "2000",
                            IdTipo = "2",
                            IdUso = "1",
                            Nombre = "DEUDAS FISCALES"
                        },
                        new
                        {
                            Id = "2131",
                            IdSuperior = "2130",
                            IdTipo = "2",
                            IdUso = "2",
                            Nombre = "IVA DEBITO FISCAL 21%"
                        },
                        new
                        {
                            Id = "2132",
                            IdSuperior = "2130",
                            IdTipo = "2",
                            IdUso = "2",
                            Nombre = "IVA DEBITO FISCAL 10.5%"
                        },
                        new
                        {
                            Id = "3000",
                            IdTipo = "3",
                            IdUso = "1",
                            Nombre = "PATRIMONIO NETO"
                        },
                        new
                        {
                            Id = "3111",
                            IdSuperior = "3000",
                            IdTipo = "3",
                            IdUso = "2",
                            Nombre = "CAPITAL SOCIAL"
                        },
                        new
                        {
                            Id = "3200",
                            IdSuperior = "3000",
                            IdTipo = "3",
                            IdUso = "1",
                            Nombre = "RESULTADOS"
                        },
                        new
                        {
                            Id = "3220",
                            IdSuperior = "3000",
                            IdTipo = "3",
                            IdUso = "2",
                            Nombre = "RESULTADOS DE EJERCICIO"
                        },
                        new
                        {
                            Id = "4000",
                            IdTipo = "4",
                            IdUso = "1",
                            Nombre = "INGRESOS"
                        },
                        new
                        {
                            Id = "4111",
                            IdSuperior = "4000",
                            IdTipo = "4",
                            IdUso = "2",
                            Nombre = "VENTAS"
                        },
                        new
                        {
                            Id = "4112",
                            IdSuperior = "4000",
                            IdTipo = "4",
                            IdUso = "2",
                            Nombre = "IMPUESTO INTERNO VENTAS"
                        },
                        new
                        {
                            Id = "5000",
                            IdTipo = "5",
                            IdUso = "1",
                            Nombre = "EGRESOS"
                        },
                        new
                        {
                            Id = "5111",
                            IdSuperior = "5000",
                            IdTipo = "5",
                            IdUso = "2",
                            Nombre = "COMPRAS"
                        },
                        new
                        {
                            Id = "5200",
                            IdSuperior = "5000",
                            IdTipo = "5",
                            IdUso = "1",
                            Nombre = "GASTOS"
                        },
                        new
                        {
                            Id = "5211",
                            IdSuperior = "5200",
                            IdTipo = "5",
                            IdUso = "2",
                            Nombre = "GASTOS VARIOS"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.DetalleMayor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("TEXT");

                    b.Property<string>("Concepto")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVenc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuenta")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuentaMayor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdCuentaMayor");

                    b.ToTable("DetalleMayor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.ItemIva", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("TEXT");

                    b.Property<string>("CondIva")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LibroIvaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("LibroIvaId");

                    b.ToTable("ItemIva");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.ItemTributo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTributo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LibroIvaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Tarifa")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("LibroIvaId");

                    b.ToTable("ItemTributo");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.LibroIva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Autorizado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoOperacion")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CotizacionMoneda")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Exento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaComp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVenc")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Gravado")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArea")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdComprobante")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuenta")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdMoneda")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSucursal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipoDoc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Iva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NoGravado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Origen")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OtrosTributos")
                        .HasColumnType("TEXT");

                    b.Property<int>("Pe")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LibroIva");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.Mayor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Concepto")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaComp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVenc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArea")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdComprobante")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSucursal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<long>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Obs")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origen")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Pe")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Mayor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.MovCtaCte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Concepto")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaComp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVenc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArea")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdComprobante")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuenta")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuentaMayor")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSucursal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<long>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Origen")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Pe")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdCuentaMayor");

                    b.ToTable("MovCtaCte");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.TipoCuentaMayor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoCuentaMayor");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nombre = "ACTIVO"
                        },
                        new
                        {
                            Id = "2",
                            Nombre = "PASIVO"
                        },
                        new
                        {
                            Id = "3",
                            Nombre = "PATRIMONIO NETO"
                        },
                        new
                        {
                            Id = "4",
                            Nombre = "RESULTADO DE INGRESOS"
                        },
                        new
                        {
                            Id = "5",
                            Nombre = "RESULTADO DE EGRESOS"
                        },
                        new
                        {
                            Id = "6",
                            Nombre = "ORDEN"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.UsoCuentaMayor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UsoCuentaMayor");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Nombre = "INTEGRACION"
                        },
                        new
                        {
                            Id = "2",
                            Nombre = "GENERAL"
                        },
                        new
                        {
                            Id = "3",
                            Nombre = "CUENTA CORRIENTE"
                        },
                        new
                        {
                            Id = "4",
                            Nombre = "CAJA"
                        },
                        new
                        {
                            Id = "5",
                            Nombre = "BANCO"
                        },
                        new
                        {
                            Id = "6",
                            Nombre = "CARTERA DE VALORES"
                        },
                        new
                        {
                            Id = "7",
                            Nombre = "LIBRO DE IVA"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Global.CondIva", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CodAfip")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CondIva");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Global.Localidad", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProvincia")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Localidad");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Global.Provincia", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Mail.MailServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsSSL")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Prioridad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Puerto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoServer")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MailServer");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.CarteraValor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Banco")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArea")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuenta")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuentaMayor")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSucursal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Obs")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Sucursal")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdCuentaMayor");

                    b.ToTable("CarteraValor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.ConfigRecibo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNumeradorDocumento")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdNumeradorDocumento");

                    b.ToTable("ConfigRecibo");

                    b.HasData(
                        new
                        {
                            Id = "001",
                            IdNumeradorDocumento = "00019"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.DetalleComprobante", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Concepto")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMovCtaCte")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipoComp")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pe")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReciboCtaCteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("ReciboCtaCteId");

                    b.ToTable("DetalleComprobante");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.DetalleRelacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<Guid>("IdMovCtaCte")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReciboCtaCteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("ReciboCtaCteId");

                    b.ToTable("DetalleRelacion");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.DetalleValores", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Banco")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Concepto")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdCarteraValor")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdComp")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuentaMayor")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReciboCtaCteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sucursal")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("IdCuentaMayor");

                    b.HasIndex("ReciboCtaCteId");

                    b.ToTable("DetalleValores");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.MovCarteraValor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Concepto")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.ToTable("MovCarteraValor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.ReciboCtaCte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArea")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuenta")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuentaMayor")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSucursal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTipo")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Obs")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Pe")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdCuentaMayor");

                    b.ToTable("ReciboCtaCte");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ComprobanteAsociado", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("FacturaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdFactura")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("FacturaId");

                    b.ToTable("ComprobanteAsociado");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ConfigFactura", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Reporte")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteFiscal")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdSeccion");

                    b.ToTable("ConfigFactura");

                    b.HasData(
                        new
                        {
                            Id = "001"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.DetalleFactura", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Bonificacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("TEXT");

                    b.Property<string>("Concepto")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CondIva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Exento")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FacturaId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Gravado")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArticulo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdUnidadMedida")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Iva")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lote")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NoGravado")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OtroTributo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PorBonificacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serie")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("FacturaId");

                    b.HasIndex("IdArticulo");

                    b.ToTable("DetalleFactura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.DetalleIva", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("TEXT");

                    b.Property<string>("CondIva")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FacturaId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("FacturaId");

                    b.ToTable("DetalleIva");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.DetalleTributos", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FacturaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdTributo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Tarifa")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("FacturaId");

                    b.ToTable("DetalleTributos");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.Factura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Cae")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CotizacionMoneda")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaComp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdArea")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdConceptoAfip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdCuenta")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdEmpresa")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdMoneda")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSeccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdSucursal")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdTransaccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Letra")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<long>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Obs")
                        .HasColumnType("text");

                    b.Property<string>("Origen")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Pe")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PorDescuento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalDescuento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalExento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalGravado")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalIva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalNeto")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalNoGravado")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalOTributos")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdCuenta");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ItemNumerador", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("IdComprobante")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("IdNumeradorDocumento")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "IdComprobante");

                    b.HasIndex("IdNumeradorDocumento");

                    b.ToTable("ItemNumerador");

                    b.HasData(
                        new
                        {
                            Id = "001",
                            IdComprobante = 1,
                            IdNumeradorDocumento = "00001"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 3,
                            IdNumeradorDocumento = "00002"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 2,
                            IdNumeradorDocumento = "00003"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 6,
                            IdNumeradorDocumento = "00004"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 8,
                            IdNumeradorDocumento = "00005"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 7,
                            IdNumeradorDocumento = "00006"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 11,
                            IdNumeradorDocumento = "00007"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 13,
                            IdNumeradorDocumento = "00008"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 12,
                            IdNumeradorDocumento = "00009"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 51,
                            IdNumeradorDocumento = "00010"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 53,
                            IdNumeradorDocumento = "00011"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 52,
                            IdNumeradorDocumento = "00012"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 19,
                            IdNumeradorDocumento = "00013"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 21,
                            IdNumeradorDocumento = "00014"
                        },
                        new
                        {
                            Id = "001",
                            IdComprobante = 20,
                            IdNumeradorDocumento = "00015"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ItemPuntoEmision", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("IdPuntoEmision")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id", "IdPuntoEmision");

                    b.HasIndex("IdPuntoEmision");

                    b.ToTable("ItemPuntoEmision");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.MedioPago", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Item")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Concepto")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FacturaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaVenc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCuentaMayor")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importe")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "Item");

                    b.HasIndex("FacturaId");

                    b.ToTable("MedioPago");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ModeloAsientoFactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CtaCajaDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaGastoDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaImpuestoDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaIngresoDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaIvaGenDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaIvaRedDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaPerIGDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CtaPerIvaDefault")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ModeloAsientoFactura");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CtaCajaDefault = "1111",
                            CtaGastoDefault = "5211",
                            CtaImpuestoDefault = "4112",
                            CtaIngresoDefault = "4111",
                            CtaIvaGenDefault = "2131",
                            CtaIvaRedDefault = "2132",
                            Nombre = "GENERAL"
                        });
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.NumeradorPuntoEmision", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("IdNumeradorDocumento")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id", "IdNumeradorDocumento");

                    b.HasIndex("IdNumeradorDocumento");

                    b.ToTable("NumeradorPuntoEmision");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.PuntoEmision", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Altura")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdAfipWsService")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdProvincia")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Localidad")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PuntoEmision");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Almacen.Articulo", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Almacen.Familia", "Familia")
                        .WithMany()
                        .HasForeignKey("IdFamilia");

                    b.Navigation("Familia");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Contacto", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany("Contactos")
                        .HasForeignKey("IdSujeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Domicilio", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany("Domicilios")
                        .HasForeignKey("IdSujeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Sujeto", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Global.CondIva", "CondIva")
                        .WithMany()
                        .HasForeignKey("CondIvaId");

                    b.HasOne("BackEnd.Services.Models.Global.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");

                    b.Navigation("CondIva");

                    b.Navigation("Localidad");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.TipoRolSujeto", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany("TipoRolSujeto")
                        .HasForeignKey("IdSujeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Services.Models.Comun.TipoRol", "TipoRol")
                        .WithMany()
                        .HasForeignKey("IdTipoRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sujeto");

                    b.Navigation("TipoRol");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Vehiculo", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdSujeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.CuentaMayor", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Contable.TipoCuentaMayor", "TipoCuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdTipo");

                    b.HasOne("BackEnd.Services.Models.Contable.UsoCuentaMayor", "UsoCuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdUso");

                    b.Navigation("TipoCuentaMayor");

                    b.Navigation("UsoCuentaMayor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.DetalleMayor", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Contable.Mayor", "Mayor")
                        .WithMany("Detalle")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany()
                        .HasForeignKey("IdCuenta");

                    b.HasOne("BackEnd.Services.Models.Contable.CuentaMayor", "CuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdCuentaMayor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaMayor");

                    b.Navigation("Mayor");

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.ItemIva", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Contable.LibroIva", "LibroIva")
                        .WithMany("DetalleIva")
                        .HasForeignKey("LibroIvaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LibroIva");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.ItemTributo", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Contable.LibroIva", "LibroIva")
                        .WithMany("DetalleTributo")
                        .HasForeignKey("LibroIvaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LibroIva");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.MovCtaCte", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany()
                        .HasForeignKey("IdCuenta");

                    b.HasOne("BackEnd.Services.Models.Contable.CuentaMayor", "CuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdCuentaMayor");

                    b.Navigation("CuentaMayor");

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Global.Localidad", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Global.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("IdProvincia");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.CarteraValor", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany()
                        .HasForeignKey("IdCuenta");

                    b.HasOne("BackEnd.Services.Models.Contable.CuentaMayor", "CuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdCuentaMayor");

                    b.Navigation("CuentaMayor");

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.ConfigRecibo", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Services.Models.Comun.NumeradorDocumento", "NumeradorDocumento")
                        .WithMany()
                        .HasForeignKey("IdNumeradorDocumento");

                    b.Navigation("NumeradorDocumento");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.DetalleComprobante", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Tesoreria.ReciboCtaCte", "ReciboCtaCte")
                        .WithMany("DetalleComprobante")
                        .HasForeignKey("ReciboCtaCteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReciboCtaCte");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.DetalleRelacion", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Tesoreria.ReciboCtaCte", "ReciboCtaCte")
                        .WithMany("DetalleRelacion")
                        .HasForeignKey("ReciboCtaCteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReciboCtaCte");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.DetalleValores", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Contable.CuentaMayor", "CuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdCuentaMayor");

                    b.HasOne("BackEnd.Services.Models.Tesoreria.ReciboCtaCte", "ReciboCtaCte")
                        .WithMany("DetalleValores")
                        .HasForeignKey("ReciboCtaCteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CuentaMayor");

                    b.Navigation("ReciboCtaCte");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.MovCarteraValor", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Tesoreria.CarteraValor", "CarteraValor")
                        .WithMany("MovCarteraValor")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarteraValor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.ReciboCtaCte", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany()
                        .HasForeignKey("IdCuenta");

                    b.HasOne("BackEnd.Services.Models.Contable.CuentaMayor", "CuentaMayor")
                        .WithMany()
                        .HasForeignKey("IdCuentaMayor");

                    b.Navigation("CuentaMayor");

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ComprobanteAsociado", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.Factura", "Factura")
                        .WithMany("ComprobanteAsociado")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ConfigFactura", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Seccion", "Seccion")
                        .WithMany()
                        .HasForeignKey("IdSeccion");

                    b.Navigation("Seccion");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.DetalleFactura", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.Factura", "Factura")
                        .WithMany("Detalle")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackEnd.Services.Models.Almacen.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.DetalleIva", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.Factura", "Factura")
                        .WithMany("Iva")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.DetalleTributos", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.Factura", "Factura")
                        .WithMany("Tributos")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.Factura", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Comun.Sujeto", "Sujeto")
                        .WithMany()
                        .HasForeignKey("IdCuenta");

                    b.Navigation("Sujeto");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ItemNumerador", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.ConfigFactura", "ConfigFactura")
                        .WithMany("Numeradores")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Services.Models.Comun.NumeradorDocumento", "NumeradorDocumento")
                        .WithMany()
                        .HasForeignKey("IdNumeradorDocumento");

                    b.Navigation("ConfigFactura");

                    b.Navigation("NumeradorDocumento");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ItemPuntoEmision", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.ConfigFactura", "ConfigFactura")
                        .WithMany("PuntosEmision")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Services.Models.Ventas.PuntoEmision", "PuntoEmision")
                        .WithMany()
                        .HasForeignKey("IdPuntoEmision")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigFactura");

                    b.Navigation("PuntoEmision");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.MedioPago", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.Factura", "Factura")
                        .WithMany("MedioPago")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.NumeradorPuntoEmision", b =>
                {
                    b.HasOne("BackEnd.Services.Models.Ventas.PuntoEmision", "PuntoEmision")
                        .WithMany("Numeradores")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Services.Models.Comun.NumeradorDocumento", "NumeradorDocumento")
                        .WithMany()
                        .HasForeignKey("IdNumeradorDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NumeradorDocumento");

                    b.Navigation("PuntoEmision");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Comun.Sujeto", b =>
                {
                    b.Navigation("Contactos");

                    b.Navigation("Domicilios");

                    b.Navigation("TipoRolSujeto");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.LibroIva", b =>
                {
                    b.Navigation("DetalleIva");

                    b.Navigation("DetalleTributo");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Contable.Mayor", b =>
                {
                    b.Navigation("Detalle");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.CarteraValor", b =>
                {
                    b.Navigation("MovCarteraValor");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Tesoreria.ReciboCtaCte", b =>
                {
                    b.Navigation("DetalleComprobante");

                    b.Navigation("DetalleRelacion");

                    b.Navigation("DetalleValores");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.ConfigFactura", b =>
                {
                    b.Navigation("Numeradores");

                    b.Navigation("PuntosEmision");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.Factura", b =>
                {
                    b.Navigation("ComprobanteAsociado");

                    b.Navigation("Detalle");

                    b.Navigation("Iva");

                    b.Navigation("MedioPago");

                    b.Navigation("Tributos");
                });

            modelBuilder.Entity("BackEnd.Services.Models.Ventas.PuntoEmision", b =>
                {
                    b.Navigation("Numeradores");
                });
#pragma warning restore 612, 618
        }
    }
}
